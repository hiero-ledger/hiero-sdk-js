/**
 * # Token Create
 * Create a new token on Hedera.
 */
syntax = "proto3";

package proto;

// SPDX-License-Identifier: Apache-2.0
option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "basic_types.proto";
import "duration.proto";
import "timestamp.proto";
import "custom_fees.proto";

/**
 * Create a new token.
 */
message TokenCreateTransactionBody {
    /**
     * The publicly visible name of the token.
     */
    string name = 1;

    /**
     * The publicly visible token symbol.
     */
    string symbol = 2;

    /**
     * The number of decimal places a token is divisible by.
     */
    uint32 decimals = 3;

    /**
     * Specifies the initial supply of tokens to be put in circulation.
     */    
     uint64 initialSupply = 4;

    /**
     * The account which will act as a treasury for the token.
     */
    AccountID treasury = 5;

    /**
     * The key which can perform update/delete operations on the token.
     */
    Key adminKey = 6;

    /**
     * The key which can grant or revoke KYC of an account for the token's transactions.
     */
    Key kycKey = 7;

    /**
     * The key which can sign to freeze or unfreeze an account for token transactions.
     */
    Key freezeKey = 8;

    /**
     * The key which can wipe the token balance of an account.
     */
    Key wipeKey = 9;

    /**
     * The key which can change the supply of a token.
     */
    Key supplyKey = 10;

    /**
     * The default Freeze status (frozen or unfrozen) of Hedera accounts relative to this token.
     */
    bool freezeDefault = 11;

    /**
     * The epoch second at which the token should expire.
     */
    Timestamp expiry = 13;

    /**
     * An account which will be automatically charged to renew the token's expiration.
     */
    AccountID autoRenewAccount = 14;

    /**
     * The interval at which the auto-renew account will be charged to extend the token's expiry.
     */
    Duration autoRenewPeriod = 15;

    /**
     * The memo associated with the token.
     */
    string memo = 16;

    /**
     * IWA compatibility. Specifies the token type.
     */
    TokenType tokenType = 17;

    /**
     * IWA compatibility. Specified the supply type of the token.
     */
    TokenSupplyType supplyType = 18;

    /**
     * IWA Compatibility. Depends on TokenSupplyType.
     */
    int64 maxSupply = 19;

    /**
     * The key which can change the token's custom fee schedule.
     */
    Key fee_schedule_key = 20;

    /**
     * The custom fees to be assessed during a CryptoTransfer that transfers units of this token.
     */
    repeated CustomFee custom_fees = 21;

    /**
     * The key which can pause and unpause the Token.
     */
    Key pause_key = 22;

    /**
     * Metadata that is passed through and not validated.
     */
    bytes metadata = 23;

    /**
     * The key which can update the metadata of a token.
     */
    Key metadata_key = 24;
}

