/**
 * # Transaction
 * A (mostly legacy) wrapper around the bytes of a
 * serialized `SignedTransaction` message.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package proto;

// SPDX-License-Identifier: Apache-2.0
option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;



import "crypto_create.proto";
import "duration.proto";
import "custom_fees.proto";

/**
 * A wrapper around signed transaction bytes.<br/>
 * This was originally a transaction with body, signatures, and/or bytes,
 * but is not only a wrapper around a byte array containing signed transction
 * bytes.
 *
 * The `signedTransactionBytes` field is REQUIRED and MUST contain a valid,
 * serialized, `SignedTransaction` message.<br/>
 * All other fields are deprecated and MUST NOT be set.
 *
 * #### Additional Notes
 * The four deprecated fields will be removed and reserved in a future release.
 */
message Transaction {
    // <<<pbj.java_package = "com.hedera.hapi.node.base">>> This comment is special code for setting PBJ Compiler java package
    /**
     * Replaced with `signedTransactionBytes`.<br/>
     * The body of the transaction.
     */
    TransactionBody body = 1 [deprecated = true];

    /**
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body.
     */
    SignatureList sigs = 2 [deprecated = true];

    /**
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body with a newer format.
     */
    SignatureMap sigMap = 3 [deprecated = true];

    /**
     * Replaced with `signedTransactionBytes`.<br/>
     * TransactionBody serialized into bytes.
     */
    bytes bodyBytes = 4 [deprecated = true];

    /**
     * A valid, serialized, `SignedTransaction` message.
     * <p>
     * This field MUST be present.
     * This field MUST NOT exceed the current network transaction size limit
     * (currently 6144 bytes).
     */
    bytes signedTransactionBytes = 5;
}

/**
 * A transaction body.
 *
 * Every transaction is structured as a signed byte array. That byte array
 * is a serialized `TransactionBody`.  The transaction body contains the full
 * content of the transaction, while the `SignedTransaction` includes a
 * signature map for signatures authenticating that byte array, and that is
 * serialized and transmitted wrapped in a `Transaction` message.<br/>
 * The bulk of this message is a `oneof` block which offers the option for
 * any one of the transaction messages for the network.
 * This message also includes several additional fields to specify
 * various parameters required to process a transaction.
 */
message TransactionBody {
    // <<<pbj.java_package = "com.hedera.hapi.node.transaction">>> This comment is special code for setting PBJ Compiler java package
    reserved 30, 61, 62, 63, 64;

    reserved "tssMessage", "tssVote", "tssShareSignature", "tssEncryptionKey";

    /**
     * A transaction identifier.<br/>
     * Each transaction is uniquely identified by its transaction
     * identifier.
     * <p>
     * Each transaction identifier MUST be unique.<br/>
     * Multiple transactions MAY be submitted with the same transaction
     * identifier, but all except the first SHALL be rejected as duplicate
     * transactions.<br/>
     * This identifier MUST specify a `payer` account to be charged
     * all fees associated with the transaction.<br/>
     * This identifier MUST specify a "valid start time".<br/>
     * The "valid start time" MUST be strictly _earlier_ than the current
     * network consensus time.<br/>
     * The "valid start time" MUST NOT be more than the current network
     * configuration value for `transaction.maxValidDuration` seconds
     * before the current network consensus time.<br/>
     * This identifier MUST NOT set the `scheduled` flag.<br/>
     * This identifier MUST NOT set a nonce value.
     */
    TransactionID transactionID = 1;

    /**
     * A node account identifier.
     * <p>
     * This MUST identify the account of the consensus node to which
     * this transaction is submitted.
     */
    AccountID nodeAccountID = 2;

    /**
     * A maximum transaction fee, in tinybar.
     * <p>
     * The network SHALL NOT charge a transaction fee that exceeds this
     * amount.<br/>
     * The network MAY charge up to this amount, and reject the transaction,
     * if the amount offered is insufficient to cover the required fees.<br/>
     * The network MAY charge a minimum fee equal to 80% of the amount offered
     * if the amount offered is much larger than the required fees.
     */
    uint64 transactionFee = 3;

    /**
     * A maximum duration in which to execute this transaction.
     * <p>
     * This transaction SHALL be rejected as expired if the valid start time,
     * extended by this duration, is less than the current network consensus
     * time when the transaction is submitted.<br/>
     * This transaction SHALL be rejected with an invalid duration if this
     * value is greater than the current network configuration value for
     * `transaction.maxValidDuration`.
     */
    Duration transactionValidDuration = 4;

    /**
     * Records are always generated.<br/>
     * Obsolete option to not generate a record.
     * <p>
     * This flag SHALL be ignored. Every transaction SHALL generate a record,
     * or block stream equivalent.
     */
    bool generateRecord = 5 [deprecated = true];

    /**
     * A short description for this transaction.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     */
    string memo = 6;

    /**
     * The <b>public key</b> of the trusted batch assembler.
     */
    Key batch_key = 73;

    // The fields here are ordered in strictly ascending field ordinal
    // order due to limitations in PBJ.
    oneof data {
        /**
         * Create a new Hedera account.
         */
        CryptoCreateTransactionBody cryptoCreateAccount = 11;
    }

    /**
     * A list of maximum custom fees that the users are willing to pay.
     * <p>
     * This field is OPTIONAL.<br/>
     * If left empty, the users are accepting to pay any custom fee.<br/>
     * If used with a transaction type that does not support custom fee limits, the transaction will fail.
     */
    repeated CustomFeeLimit max_custom_fees = 1001;
}

/**
 * A transaction body for handling a set of transactions atomically.
 */
message AtomicBatchTransactionBody {
  // <<<pbj.java_package = "com.hedera.hapi.node.util">>> This comment is special code for setting PBJ Compiler java package
    /**
     * A list of signed bytes that represent the batch transactions.
     */
    repeated bytes transactions = 1;
}
