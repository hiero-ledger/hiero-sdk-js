version: "3"

silent: true

tasks:
    default:
        deps:
            - build

    docs:
        cmds:
            - npx typedoc
              --excludeInternal
              --excludePrivate
              --excludeProtected
              --out docs
              --validation.invalidLink
              --entryPoints src/index.js src/browser.js src/native.js

    install:submodules:
        vars:
            commit: "7ca2f4e457a68fbc092edd17552bc5db7e032f6d" # v0.65.0
        cmds:
            - git submodule update --init --recursive --remote
            - |
                (
                cd src/services &&
                if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
                    git fetch --unshallow --tags
                fi &&
                git checkout {{.commit}}
                )

    move:protobufs:
        after:
            - "install:submodules"
        desc: "Move protobufs from src/services/hapi/hedera-protobufs-java-api/src/main/proto to src/proto"
        cmds:
            - rm -rf src/proto/services
            - rm -rf src/proto/streams
            - mv src/services/hapi/hedera-protobuf-java-api/src/main/proto/services src/proto/
            - mv src/services/hapi/hedera-protobuf-java-api/src/main/proto/streams src/proto/
            - mv src/services/hapi/hedera-protobuf-java-api/src/main/proto/platform/event/* src/proto/services/
            - echo "Protobufs moved successfully!"
            - task "delete:submodule"

    delete:submodule:
        cmds:
            - find src/services -mindepth 1 -delete
            - echo "Submodule contents removed successfully, folder retained."

    install:
        deps:
            - "install:submodules"
        cmds:
            - task "move:protobufs"
            - pnpm i > /dev/null

    build:
        deps:
            - install
        cmds:
            - task "build:standalone"
            - task "build:minimal:transactions"

    build:standalone:
        cmds:
            - npx pbjs -r hashgraph -t static-module -w es6 -p=src/proto --force-long --no-beautify --no-convert --no-delimited --no-verify -o src/proto.js src/proto/**/*.proto
            - npx pbts -n hashgraph -o src/proto.d.ts src/proto.js
            - perl -pi -e "s#(?<!api\.)proto\.#hashgraph.proto.#g" src/proto.d.ts
            - task: format
            - task: lint
            - npx babel src -d lib
            - npx copyfiles -u 1 src/index.d.ts src/proto.d.ts lib/ > /dev/null
              # This is necessary to correctly run browser tests with an unpublished proto package
            - npx yalc publish > /dev/null
    build:minimal:transactions:
        desc: "Generate individual JS files for each transaction proto file"
        cmds:
            - mkdir -p src/minimal
            - |
                success_count=0
                fail_count=0

                # Generate individual transaction files with specific dependencies
                for proto_file in minimal_src/*_transaction.proto; do
                    if [ -f "$proto_file" ]; then
                        base_name=$(basename "$proto_file" .proto)
                        echo "Generating $base_name.js..."
                        
                        # Get the imports from the transaction file
                        imports=$(grep -h '^import' "$proto_file" | sed 's/import "\(.*\)";/minimal_src\/\1/' | tr '\n' ' ')
                        
                        # Get list of directly imported files (without minimal_src/ prefix) 
                        direct_imports=$(grep -h '^import' "$proto_file" | sed 's/import "\(.*\)";/\1/' | tr '\n' ' ')
                        
                        # Build common deps, excluding any that are directly imported
                        common_deps=""
                        for dep in duration.proto basic_types.proto custom_fees.proto timestamp.proto google_protobuf_wrappers.proto; do
                            if ! echo "$direct_imports" | grep -q "$dep"; then
                                common_deps="$common_deps minimal_src/$dep"
                            fi
                        done
                        
                        # Generate each transaction with its specific dependencies to src/minimal
                        if npx pbjs -t static-module -w es6 -p=minimal_src --dependency protobufjs/minimal --force-long --no-beautify --no-convert --no-delimited --no-verify -o "src/minimal/${base_name}.js" "$proto_file" $imports $common_deps 2>/dev/null; then
                            npx pbjs -t static-module -w es6 -p=minimal_src --dependency protobufjs/minimal --force-long --no-beautify --no-convert --no-delimited --no-verify -o "src/minimal/transaction_contents.js" transaction_contents.proto timestamp.proto google_protobuf_wrappers.proto
                            npx pbts -n hashgraph -o src/minimal/${base_name}.d.ts src/minimal/${base_name}.js
                            echo "✓ Successfully generated $base_name.js"
                            success_count=$((success_count + 1))
                        fi
                    fi
                done

                echo ""
                echo "Summary: $success_count files generated successfully, $fail_count failed"
                if [ $success_count -gt 0 ]; then
                    echo "✓ Each generated JS file contains the specific transaction and its dependencies"
                fi
                if [ $fail_count -gt 0 ]; then
                    echo "Note: Failed files likely have missing dependencies that need to be added to minimal_src/"
                fi
            - npx babel src/minimal -d lib/minimal > /dev/null
            - task: generate:minimal:index

    generate:minimal:index:
        desc: "Generate index.js file for tree-shaking support in lib/minimal"
        cmds:
            - |
                echo "Generating lib/minimal/index.js for tree-shaking..."

                # Create the index.js content
                cat > lib/minimal/index.js << 'EOF'
                // Auto-generated index file for minimal transaction proto modules
                // This enables tree-shaking by providing named exports for each transaction type

                EOF

                # Add named exports for each .js file
                for js_file in lib/minimal/*.js; do
                    if [ -f "$js_file" ]; then
                        base_name=$(basename "$js_file" .js)
                        # Skip index.js to avoid circular reference
                        if [ "$base_name" != "index" ]; then
                            # Convert snake_case to PascalCase
                            class_name=$(echo "$base_name" | awk -F_ '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1' OFS="")
                            echo "export { default as $class_name } from \"./$base_name.js\";" >> lib/minimal/index.js
                        fi
                    fi
                done

                echo "" >> lib/minimal/index.js
                echo "// For backwards compatibility, also export all as a single object" >> lib/minimal/index.js
                echo "export default {" >> lib/minimal/index.js

                # Add dynamic imports for default export
                for js_file in lib/minimal/*.js; do
                    if [ -f "$js_file" ]; then
                        base_name=$(basename "$js_file" .js)
                        # Skip index.js to avoid circular reference
                        if [ "$base_name" != "index" ]; then
                            # Convert snake_case to PascalCase
                            class_name=$(echo "$base_name" | awk -F_ '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1' OFS="")
                            echo "    $class_name: () => import(\"./$base_name.js\")," >> lib/minimal/index.js
                        fi
                    fi
                done

                echo "};" >> lib/minimal/index.js

                # Count the exports
                export_count=$(grep -c "export { default as" lib/minimal/index.js)
                echo "✓ Generated index.js with $export_count transaction exports"

    clean:
        cmds:
            - rm -rf node_modules

    format:
        cmds:
            - npx prettier "*.json" "src/*.js" --write > /dev/null

    lint:
        deps:
            - "lint:types"
            - "lint:format"
            - "lint:js"

    "lint:types":
        cmds:
            - npx tsc

    "lint:format":
        cmds:
            - npx prettier "*.json" "src/*.js" --check > /dev/null

    "lint:js":
        cmds:
            - npx eslint --fix "src/proto.js"

    "test:release":
        deps:
            - build

    update:
        vars:
            latest_tag:
                sh: git ls-remote --tags https://github.com/hiero-ledger/hiero-consensus-node.git | awk '{print $2}' | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1 | sed 's#refs/tags/##'
            proto: "{{.proto | default .latest_tag}}"
        cmds:
            - echo "Protobuf version set to {{.proto}}"
            - git submodule update --init --recursive --remote
            - |
                (
                cd src/services &&
                if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
                    git fetch --unshallow --tags
                fi &&
                git checkout {{.stag}}
                )
            - task "move:protobufs"
            - pnpm i > /dev/null
            - task "build:standalone"
            - echo "Successfully updated protobufs to {{.proto}}"

    publish:
        preconditions:
            - "! grep '\".*\": \"\\(link\\|file\\):.*\"' package.json > /dev/null"
        deps:
            - "test:release"
        cmds:
            - pnpm publish {{.CLI_ARGS}}
